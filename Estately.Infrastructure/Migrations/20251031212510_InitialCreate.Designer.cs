// <auto-generated />
using System;
using Estately.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Estately.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20251031212510_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Estately.Core.Entities.TblAppointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeClientID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AppointmentID");

                    b.HasIndex("EmployeeClientID");

                    b.HasIndex("PropertyID");

                    b.ToTable("TblAppointments");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblBranch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BranchID");

                    b.ToTable("TblBranches");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblCity", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CityID");

                    b.ToTable("TblCities");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblClientProfile", b =>
                {
                    b.Property<int>("ClientProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientProfileID"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ClientProfileID");

                    b.ToTable("TblClientProfiles");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblCommission", b =>
                {
                    b.Property<int>("CommissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.HasKey("CommissionID");

                    b.HasIndex("TransactionID");

                    b.ToTable("TblCommission");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblDepartment", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("BranchId");

                    b.ToTable("TblDepartments");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblDeveloperProfile", b =>
                {
                    b.Property<int>("DeveloperProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeveloperProfileID"));

                    b.Property<string>("DeveloperName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LogoURL")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteURL")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DeveloperProfileID");

                    b.ToTable("TblDeveloperProfiles");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblEmployee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex(new[] { "UserID" }, "IX_TblEmployees")
                        .IsUnique();

                    b.ToTable("TblEmployees");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblEmployeeClient", b =>
                {
                    b.Property<int>("EmployeeClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeClientID"));

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ClientProfileID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeClientID");

                    b.HasIndex("ClientProfileID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("TblEmployeeClients");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblFavorite", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteID"));

                    b.Property<int>("ClientProfileID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteID");

                    b.HasIndex("ClientProfileID");

                    b.HasIndex("PropertyID");

                    b.ToTable("TblFavorites");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPayment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("TransactionID");

                    b.ToTable("TblPayments");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblProperty", b =>
                {
                    b.Property<int>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DeveloperProfileID")
                        .HasColumnType("int");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListingDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PropertyTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ZoneID")
                        .HasColumnType("int");

                    b.HasKey("PropertyID");

                    b.HasIndex("DeveloperProfileID");

                    b.HasIndex("PropertyTypeID");

                    b.HasIndex("ZoneID");

                    b.ToTable("TblProperties");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPropertyFeature", b =>
                {
                    b.Property<int>("FeatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("FeatureID");

                    b.ToTable("TblPropertyFeatures");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPropertyFeaturesMapping", b =>
                {
                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PropertyID", "FeatureID");

                    b.HasIndex("FeatureID");

                    b.ToTable("TblPropertyFeaturesMapping");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPropertyImage", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageID"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ImageID");

                    b.HasIndex("PropertyID");

                    b.ToTable("TblPropertyImages");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPropertyType", b =>
                {
                    b.Property<int>("PropertyTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PropertyTypeID");

                    b.ToTable("TblPropertyTypes");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblTransaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeClientID")
                        .HasColumnType("int");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionID");

                    b.HasIndex("EmployeeClientID");

                    b.HasIndex("PropertyID");

                    b.ToTable("TblTransactions");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblUser", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("ISClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeveloper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("TblUsers");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblUserType", b =>
                {
                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserTypeID");

                    b.ToTable("TblUserType");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblZone", b =>
                {
                    b.Property<int>("ZoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ZoneID");

                    b.HasIndex("CityID");

                    b.ToTable("TblZones");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblAppointment", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblEmployeeClient", "EmployeeClient")
                        .WithMany("TblAppointments")
                        .HasForeignKey("EmployeeClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estately.Core.Entities.TblProperty", "Property")
                        .WithMany("TblAppointments")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeClient");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblCommission", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblTransaction", "Transaction")
                        .WithMany("TblCommissions")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblDepartment", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblBranch", "Branch")
                        .WithMany("TblDepartments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblEmployee", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblDepartment", "Department")
                        .WithMany("TblEmployees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estately.Core.Entities.TblUser", "User")
                        .WithOne("TblEmployee")
                        .HasForeignKey("Estately.Core.Entities.TblEmployee", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblEmployeeClient", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblClientProfile", "ClientProfile")
                        .WithMany("TblEmployeeClients")
                        .HasForeignKey("ClientProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estately.Core.Entities.TblEmployee", "Employee")
                        .WithMany("TblEmployeeClients")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProfile");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblFavorite", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblClientProfile", "ClientProfile")
                        .WithMany("TblFavorites")
                        .HasForeignKey("ClientProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estately.Core.Entities.TblProperty", "Property")
                        .WithMany("TblFavorites")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProfile");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPayment", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblTransaction", "Transaction")
                        .WithMany("TblPayments")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblProperty", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblDeveloperProfile", "DeveloperProfile")
                        .WithMany("TblProperties")
                        .HasForeignKey("DeveloperProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estately.Core.Entities.TblPropertyType", "PropertyType")
                        .WithMany("TblProperties")
                        .HasForeignKey("PropertyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estately.Core.Entities.TblZone", "Zone")
                        .WithMany("TblProperties")
                        .HasForeignKey("ZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeveloperProfile");

                    b.Navigation("PropertyType");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPropertyFeaturesMapping", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblPropertyFeature", "Feature")
                        .WithMany("TblPropertyFeaturesMappings")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estately.Core.Entities.TblProperty", "Property")
                        .WithMany("TblPropertyFeaturesMappings")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPropertyImage", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblProperty", "Property")
                        .WithMany("TblPropertyImages")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblTransaction", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblEmployeeClient", "EmployeeClient")
                        .WithMany("TblTransactions")
                        .HasForeignKey("EmployeeClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estately.Core.Entities.TblProperty", "Property")
                        .WithMany("TblTransactions")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeClient");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblUser", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblUserType", "UserType")
                        .WithMany("TblUsers")
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblZone", b =>
                {
                    b.HasOne("Estately.Core.Entities.TblCity", "City")
                        .WithMany("TblZones")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblBranch", b =>
                {
                    b.Navigation("TblDepartments");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblCity", b =>
                {
                    b.Navigation("TblZones");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblClientProfile", b =>
                {
                    b.Navigation("TblEmployeeClients");

                    b.Navigation("TblFavorites");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblDepartment", b =>
                {
                    b.Navigation("TblEmployees");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblDeveloperProfile", b =>
                {
                    b.Navigation("TblProperties");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblEmployee", b =>
                {
                    b.Navigation("TblEmployeeClients");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblEmployeeClient", b =>
                {
                    b.Navigation("TblAppointments");

                    b.Navigation("TblTransactions");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblProperty", b =>
                {
                    b.Navigation("TblAppointments");

                    b.Navigation("TblFavorites");

                    b.Navigation("TblPropertyFeaturesMappings");

                    b.Navigation("TblPropertyImages");

                    b.Navigation("TblTransactions");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPropertyFeature", b =>
                {
                    b.Navigation("TblPropertyFeaturesMappings");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblPropertyType", b =>
                {
                    b.Navigation("TblProperties");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblTransaction", b =>
                {
                    b.Navigation("TblCommissions");

                    b.Navigation("TblPayments");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblUser", b =>
                {
                    b.Navigation("TblEmployee");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblUserType", b =>
                {
                    b.Navigation("TblUsers");
                });

            modelBuilder.Entity("Estately.Core.Entities.TblZone", b =>
                {
                    b.Navigation("TblProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
